#!/usr/bin/env python3
"""
Script principal pour lancer l'√©valuation compl√®te des mod√®les Speech-to-Text (Whisper, Wav2Vec2)

Ce script :
1. Lance l'√©valuation de tous les mod√®les
2. G√©n√®re automatiquement tous les graphiques
3. Cr√©e un rapport HTML r√©capitulatif

Usage:
    python evaluation/code/run_full_evaluation.py [--samples N]
"""

import sys
import subprocess
import argparse
import time
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def check_api_status():
    """V√©rifie que l'API est accessible"""
    import requests
    try:
        response = requests.get("http://localhost:8000/health", timeout=5)
        return response.status_code == 200
    except:
        return False


def run_evaluation(num_samples: int = 30):
    """Lance l'√©valuation des mod√®les"""
    logger.info("üöÄ Lancement de l'√©valuation des mod√®les Speech-to-Text...")
    
    # Script d'√©valuation dans le m√™me dossier
    evaluation_script = Path("evaluate_speech_models.py")
    
    try:
        # Lancement du script d'√©valuation
        cmd = [sys.executable, str(evaluation_script)]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=3600)  # 1h timeout
        
        if result.returncode == 0:
            logger.info("‚úÖ √âvaluation termin√©e avec succ√®s")
            return True
        else:
            logger.error(f"‚ùå Erreur lors de l'√©valuation: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå Timeout lors de l'√©valuation (> 1h)")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
        return False


def generate_plots():
    """G√©n√®re tous les graphiques"""
    logger.info("üé® G√©n√©ration des graphiques...")
    
    plots_script = Path("generate_plots.py")
    
    try:
        cmd = [sys.executable, str(plots_script)]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)  # 5min timeout
        
        if result.returncode == 0:
            logger.info("‚úÖ Graphiques g√©n√©r√©s avec succ√®s")
            return True
        else:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration des graphiques: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå Timeout lors de la g√©n√©ration des graphiques")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
        return False


def create_html_report():
    """Cr√©e un rapport HTML r√©capitulatif"""
    logger.info("üìù Cr√©ation du rapport HTML...")
    
    benchmarks_dir = Path("../benchmarks")
    html_file = benchmarks_dir / "evaluation_report.html"
    
    # Recherche des fichiers g√©n√©r√©s
    import glob
    from datetime import datetime
    
    # Trouver les fichiers les plus r√©cents
    result_files = glob.glob(str(benchmarks_dir / "evaluation_results_*.json"))
    plot_files = glob.glob(str(benchmarks_dir / "*.png"))
    
    if not result_files:
        logger.error("‚ùå Aucun fichier de r√©sultats trouv√©")
        return False
    
    latest_results = max(result_files)
    timestamp = Path(latest_results).stem.split('_')[-2] + '_' + Path(latest_results).stem.split('_')[-1]
    
    # Cr√©ation du HTML
    html_content = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport d'√âvaluation Speech-to-Text</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2c3e50;
            text-align: center;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #34495e;
            margin-top: 30px;
        }}
        .meta-info {{
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        .plot-container {{
            text-align: center;
            margin: 20px 0;
        }}
        .plot-container img {{
            max-width: 100%;
            height: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .footer {{
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #7f8c8d;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üéôÔ∏è Rapport d'√âvaluation des Mod√®les Speech-to-Text</h1>
        
        <div class="meta-info">
            <strong>Date de g√©n√©ration:</strong> {datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")}<br>
            <strong>Timestamp √©valuation:</strong> {timestamp}<br>
            <strong>API utilis√©e:</strong> http://localhost:8000<br>
            <strong>Dataset:</strong> Common Voice French
        </div>
        
        <h2>üìä Comparaison des M√©triques</h2>
        <div class="plot-container">
            <img src="metrics_comparison_{timestamp}.png" alt="Comparaison des m√©triques">
        </div>
        
        <h2>‚ö° Performance vs Pr√©cision</h2>
        <div class="plot-container">
            <img src="performance_vs_accuracy_{timestamp}.png" alt="Performance vs Pr√©cision">
        </div>
        
        <h2>üï∑Ô∏è Comparaison Globale (Radar Chart)</h2>
        <div class="plot-container">
            <img src="radar_comparison_{timestamp}.png" alt="Radar Chart">
        </div>
        
        <h2>üìã Tableau R√©capitulatif</h2>
        <div class="plot-container">
            <img src="summary_table_{timestamp}.png" alt="Tableau r√©capitulatif">
        </div>
        
        <h2>üìÅ Fichiers G√©n√©r√©s</h2>
        <ul>
            <li><strong>R√©sultats JSON:</strong> evaluation_results_{timestamp}.json</li>
            <li><strong>R√©sultats d√©taill√©s:</strong> detailed_results_{timestamp}.json</li>
            <li><strong>M√©triques CSV:</strong> metrics_summary_{timestamp}.csv</li>
            <li><strong>Graphiques:</strong> *.png</li>
        </ul>
        
        <div class="footer">
            <p>G√©n√©r√© automatiquement par le syst√®me d'√©valuation Speech-to-Text</p>
        </div>
    </div>
</body>
</html>
"""
    
    try:
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"‚úÖ Rapport HTML cr√©√©: {html_file}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du rapport HTML: {e}")
        return False


def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="√âvaluation compl√®te des mod√®les Speech-to-Text")
    parser.add_argument("--samples", "-s", type=int, default=30,
                       help="Nombre d'√©chantillons √† √©valuer (d√©faut: 30)")
    parser.add_argument("--skip-evaluation", action="store_true",
                       help="Ignorer l'√©valuation et g√©n√©rer seulement les graphiques")
    
    args = parser.parse_args()
    
    print("üéØ √âVALUATION COMPL√àTE DES MOD√àLES SPEECH-TO-TEXT")
    print("=" * 50)
    
    start_time = time.time()
    
    # V√©rification de l'API
    if not args.skip_evaluation:
        print("üîç V√©rification de l'API...")
        if not check_api_status():
            print("‚ùå API Speech-to-Text non accessible sur http://localhost:8000")
            print("   Assurez-vous que l'API est d√©marr√©e avec:")
            print("   source whisper_env/bin/activate && python api/start_api.py --host 0.0.0.0 --port 8000")
            sys.exit(1)
        print("‚úÖ API accessible")
    
    success = True
    
    # 1. √âvaluation des mod√®les
    if not args.skip_evaluation:
        if not run_evaluation(args.samples):
            success = False
    else:
        print("‚è≠Ô∏è  √âvaluation ignor√©e")
    
    # 2. G√©n√©ration des graphiques
    if success:
        if not generate_plots():
            success = False
    
    # 3. Cr√©ation du rapport HTML
    if success:
        if not create_html_report():
            success = False
    
    # R√©sum√© final
    total_time = time.time() - start_time
    print("\\n" + "=" * 50)
    
    if success:
        print("üéâ √âVALUATION TERMIN√âE AVEC SUCC√àS !")
        print(f"‚è±Ô∏è  Temps total: {total_time:.1f}s")
        print("üìÅ R√©sultats dans: evaluation/benchmarks/")
        print("üåê Rapport HTML: evaluation/benchmarks/evaluation_report.html")
    else:
        print("‚ùå √âVALUATION √âCHOU√âE")
        print("Consultez les logs ci-dessus pour plus d'informations")
        sys.exit(1)


if __name__ == "__main__":
    main() 